(define (make-list xs)
  (if (null? xs)
      '()
      (cons 0 (make-list (cdr xs)))
      )
  )

(define (next-cord cord xs)
  (if (null? cord)
      '()
      (if (< (car cord) (- (car xs) 1))
          (cons (+ (car cord) 1) (cdr cord))
          (cons 0 (next-cord (cdr cord) (cdr xs)))
          )
      )
  )

(define (pr xs)
  (if (null? xs)
      1
      (* (car xs) (pr (cdr xs)))
      )
  )

(define (make-multi-vector . xs)
  (define sizes (car xs))
   (define fill (if (null? (cdr xs))
                   0
                   (car (cdr xs))
                   )
    )
    
  (define cord (make-list (car xs)))
  (define (loop i n)
    (if (= i n)
        '()
        (if (= i 0)
            (cons (cons fill (list (reverse cord))) (loop (+ i 1) n))
            (begin (set! cord (next-cord cord (reverse sizes))) (cons (cons fill (list (reverse cord))) (loop (+ i 1) n)))
        )
    )
    )
  (list->vector (loop 0 (pr sizes)))
  )
(define m (make-multi-vector '(3 3 4 5) 5))
m