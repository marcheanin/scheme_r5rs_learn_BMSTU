(define (load-data file)
  (call-with-input-file file
    (lambda (port)
      (define str "")
      (define (read-loop xs)
        (set! str (read-char port))
        (if (eof-object? str)
            xs
            (read-loop (append xs (list str)))
            )
        )
      (list->string (read-loop '()))
      ))
  )

(define (save-data data file)
  (call-with-output-file file
    (lambda (port)
      (define (write-loop data)
        (if (null? data)
            #t
            (begin (display (car data) port) (write-loop (cdr data)))
            )
        )
      (write-loop (list data))
      )
    )
  )   
(define data (load-data "theory_1.rkt"))
(save-data data "output.txt")
(define (count-line file)
  (call-with-input-file file
    (lambda (port)
      (define str1 "")
      (define str2 "")
      (define (read-loop count)
        (set! str1 str2)
        (set! str2 (read-char port))
        (if (eof-object? str2)
            count
            (if (or (and (eq? str2 #\return) (not (eq? str1 #\newline))) (and (eq? str2 #\newline) (not (eq? str1 #\newline)) (not (eq? str1 #\return))))
                (read-loop (+ count 1))
                (read-loop count)
                )
            )
        )
      (read-loop 0)
      ))
  )
(count-line "theory_1.rkt")